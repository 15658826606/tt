/**************************************************************************************************************
*
*
*
*
***************************************************************************************************************/
#include<glad/glad.h>                    //相对于旧版glew的新版
#include<GLFW/glfw3.h>                   //相对于旧版glut的新版
#include<iostream>

const unsigned int SCR_WIDTH = 400;      //窗口的宽度
const unsigned int SCR_HEIGHT = 300;     //窗口的高度

void drawPoint();                        //画点函数的前置声明

int main()
{
	glfwInit();   //必须在其他任何GLFW函数之前被调用，因为它负责初始化整个GLFW库。如果成功的话，该接口将返回GL_TRUE，否则就会返回GL_FALSE
	
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);          
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_RESIZABLE,GLFW_FALSE);
	//Hint直接翻译成中文是“线索”，这里大致指“选项”,使用glfwWindowHint()可以设置一些关于窗口的选项;glfwWindowHint()接受两个参数:
	  第一个是我们要设置的hint的名字,使用GLFW常量（以GLFW_开头）指定;第二个是我们要把该hint设置成的值,该值随要设置的hint而异;
          Hint也有很多种,这里我们只设置了4种,分别是
	                                          OpenGL主版本号（GLFW_CONTEXT_VERSION_MAJOR）、
						  OpenGL副版本号（GLFW_CONTEXT_VERSION_MINOR）、
						  OpenGL模式（GLFW_OPENGL_PROFILE）、
						  窗口是否可调整大小（GLFW_RESIZABLE）;
						  这4个hint我们分别设置为3、3、GLFW_CORE_PROFILE、GLFW_FALSE;
          因为我们要使用OpenGL 3.3,所以我们把GLFW_CONTEXT_VERSION_MAJOR和GLFW_CONTEXT_VERSION_MINOR对应的hint都设置为3;
	  因为我们要使用OpenGL核心模式,所以我们把GLFW_OPENGL_PROFILE对应的hint设置为GLFW_OPENGL_CORE_PROFILE,表示使用OpenGL核心模式;
	  最后,把GLFW_RESIZABLE对应的hint设置为GLFW_FALSE,表示窗口不允许用户调整大小;之所以这样做是因为如果允许用户调整大小,大小发生变化后,
	  窗口的绘制区域默认不变（依然是原来窗口的区域）,也就是说窗口上绘制的图像的大小、位置不会发生改变;为了避免这种现象发生，我们就简单地不让
	  用户调整窗口大小（当然也有更好的方法,就是用GLFW设置一个窗口大小的回调函数,但这样比较简单）

	GLFWwindow *window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "OPENGL", NULL, NULL);     //创建一个窗口
	if (window == NULL)                             //判断窗口创建是否成功
	{
		std::cout << "窗口创建失败！" << std::endl;
		glfwTerminate();            //关闭glfw库本身
		return -1;
	}
	glfwMakeContextCurrent(window);     //设置参数window中的窗口所关联的OpenGL环境为当前环境,这个环境在当前线程中会一直保持为当前环境，
	                                      直到另一个环境被设置为当前环境，或者窗口被删除为止

	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))             初始化glad
	{
		std::cout << "初始化GLAD失败！" << std::endl;
		return -2;
	}
        
	GLuint VAO;
	glGenVertexArrays(1, &VAO);
	glBindVertexArray(VAO);

	GLuint VBO;
	glGenBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);

	GLfloat vertex[] = { 0.0f,0.0f,0.0f };
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertex), vertex, GL_STATIC_DRAW);

	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);

	glBindVertexArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	while (!glfwWindowShouldClose(window))   //如果用户准备关闭参数window所指定的窗口，那么此接口将会返回GL_TRUE，否则将会返回GL_FALSE
	{
		glPointSize(12.0);
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);  //与其它glfw开头的函数（这些函数由GLFW提供）不同,这个函数是以gl开头的,是OpenGL的函数;
	                                             glClearColor用来设置窗口被清除时的颜色,也就是背景颜色,前3个参数分别是背景颜色的R、G、B
						     分量,范围是0~1;第4个是alpha值表示透明度，这里只是设为1.0f，表示不透明
		glClear(GL_COLOR_BUFFER_BIT);      //这将会清除当前窗口,把所有像素的颜色都设置为前面所设置的清除颜色;GL_COLOR_BUFFER_BIT是
	                                             OpenGL定义的常量,表示清除颜色缓存;还有GL_DEPTH_BUFFER_BIT和GL_STENCIL_BUFFER_BIT
		
		glBindVertexArray(VAO);
		glDrawArrays(GL_POINTS, 0, 1);
		glBindVertexArray(0);

		glfwSwapBuffers(window);    //请求窗口系统将参数window关联的后缓存画面呈现给用户,通常这一步是通过窗口的前后缓存的交换
		                              完成的,也可能是在一个“预备显示”的帧缓存队列中进行截取，窗口系统可能需要等待一次垂直刷新
					      事件完成，再显示帧的内容
		glfwPollEvents();           //告诉GLFW检查所有等待处理的事件和消息，包括操作系统和窗口系统中应当处理的消息,如果有消息
		                              正在等待，它会先处理这些消息再返回；否则该函数会立即返回
	}
	
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	
	glfwTerminate();                           //关闭glfw库本身
	return 0;
}
