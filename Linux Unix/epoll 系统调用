/******************************************************************************************************************************
* Create Time : 2019-06-18
* Author      : tt
* content     : a simple epoll system call program
*
******************************************************************************************************************************/

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/select.h>
#include <sys/socket.h>
#include <sys/epoll.h>

#define ip "192.168.206.163"                                                      //服务器ip地址宏定义
#define PORT 6666 
#define MAX_EVENT_NUM 1024                                                        //最大的可读socket数

int setNonBlocking(int fd)                                                        //设置socket为非阻塞socket
{
   int old_option=fcntl(fd,F_GETFL);
   int new_option=old_option | O_NONBLOCK;
   fcntl(fd,F_SETFL,new_option);
   return old_option;
}

void addfd(int epollfd,int fd,int is_et)                 //向epoll内核事件表注册socket，并设置该socket是否启用ET模式
{
   struct epoll_event event;                             //事件结构体定义
   event.data.fd=fd;                                     //设置事件结构体的data分量
   event.events=EPOLLIN;                                 //设置事件结构体的events分量的读事件
   if(is_et)                                             //如果is_set为1表示该socket使用ET模式
   {
      event.events=event.events | EPOLLET;
   }
   epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&event);           //向内核事件表注册socket及对应的事件
   setNonBlocking(fd);                                   //将该socket设置为非阻塞的
}

void LT(struct epoll_event *events,int number,int epollfd,int listenfd)     //LT模式处理
{
   for(int i=0;i<number;i++)
   {
      if(events[i].data.fd==listenfd)                           //如果监听socket可读就接受新的连接
      {
         struct sockaddr_in client_addr;
         bzero(&client_addr,sizeof(client_addr));
         socklen_t client_addr_len=sizeof(client_addr);
         char ipbuf[64];
         memset(ipbuf,'\0',sizeof(ipbuf));
         int sock_client=accept(listenfd,(struct sockaddr*)&client_addr,&client_addr_len);
         if(sock_client < 0)
         {
            printf("accept failed!\n");
            continue;
         }
         printf("client ip : %s port : %d client socket : %u\n",
                    inet_ntop(AF_INET,&client_addr.sin_addr.s_addr,ipbuf,sizeof(ipbuf)),
                    ntohs(client_addr.sin_port),
                    sock_client);
         addfd(epollfd,sock_client,0);                         //向内核事件表注册新接受的socket
      }
      else if(events[i].events & EPOLLIN)                      //如果是连接socket就读该socket的缓冲区
      {
         char recvbuf[1024];
         memset(recvbuf,'\0',sizeof(recvbuf));
         int ret=recv(events[i].data.fd,recvbuf,sizeof(recvbuf),0);
         if(ret>0)
         {
            printf("receive data : %s\n",recvbuf);
         }
         else if(ret==0)
         {
            printf("connect closed : %d\n",events[i].data.fd);
            epoll_ctl(epollfd,EPOLL_CTL_DEL,events[i].data.fd,&events[i].events);
            close(events[i].data.fd);
         }
         else
         {
            printf("recv failed!\n");
            continue;
         }
      }
   }
}

void ET(struct epoll_event *events,int number,int epollfd,int listenfd)             //ET模式处理
{
   for(int i=0;i<number;i++)
   {
      if(events[i].data.fd==listenfd)
      {
         struct sockaddr_in client_addr;
         bzero(&client_addr,sizeof(client_addr));
         socklen_t client_addr_len=sizeof(client_addr);
         char ipbuf[64];
         memset(ipbuf,'\0',sizeof(ipbuf));
         int sock_client=accept(listenfd,(struct sockaddr*)&client_addr,&client_addr_len);
         if(sock_client < 0)
         {
            printf("accept failed!\n");
            continue;
         }
         printf("client ip : %s port : %d client socket : %u\n",
                    inet_ntop(AF_INET,&client_addr.sin_addr.s_addr,ipbuf,sizeof(ipbuf)),
                    ntohs(client_addr.sin_port),
                    sock_client);
         addfd(epollfd,sock_client,1);
      }
      else if(events[i].events & EPOLLIN)
      {
         char recvbuf[1024];
         while(1)
         {
            memset(recvbuf,'\0',sizeof(recvbuf));
            int ret=recv(events[i].data.fd,recvbuf,sizeof(recvbuf),0);
            if(ret>0)
            {
               printf("receive data : %d size : %d\n",events[i].data.fd,ret);
            }
            else if(ret==0)
            {
               printf("connect closed : %d\n",events[i].data.fd);
               epoll_ctl(epollfd,EPOLL_CTL_DEL,events[i].data.fd,&events[i].events);
               close(events[i].data.fd);
               break;
            }
            else
            {
               break;
            }
         }
      }
   }
}

int main(int argc,char **argv)                                    
{  
   struct sockaddr_in server_addr;
   bzero(&server_addr,sizeof(server_addr)); 
   server_addr.sin_family=AF_INET;
   inet_pton(AF_INET,ip,&server_addr.sin_addr); 
   //server_addr.sin_addr.s_addr=htonl(INADDR_ANY);
   server_addr.sin_port=htons(PORT);

   int sock_listen=socket(AF_INET,SOCK_STREAM,0);
   if(bind(sock_listen,(struct sockaddr*)&server_addr,sizeof(server_addr))==-1)
   {
      printf("bind failed!\n");
      exit(1);
   }
   if(listen(sock_listen,5)==-1) 
   {
      printf("listen failed!\n");
      exit(1);
   }

   int sock_epoll=epoll_create(5);                              //创建内核事件表
   struct epoll_event events[MAX_EVENT_NUM];                    //定义就绪列表数组
   addfd(sock_epoll,sock_listen,0);                             //向内核事件表注册监听socket
   
   while(1)
   {
      int ready_num=epoll_wait(sock_epoll,events,MAX_EVENT_NUM,-1);           
      if(ready_num<0)
      {
         printf("epoll_wait failed!\n");
         exit(1);
      }
      LT(&events,ready_num,sock_epoll,sock_listen);
      //ET(&events,ready_num,sock_epoll,sock_listen);
   }
   close(sock_listen);
   return 0;
}
